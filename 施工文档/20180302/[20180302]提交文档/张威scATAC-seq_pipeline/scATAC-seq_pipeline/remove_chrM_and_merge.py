#!/usr/bin/python
# -*- coding: utf-8 -*-
# remove chrM and other data, remain chr1-chrY only, this program is used to
# generate fragment BED file from a read BED file.
# Note: the input file must be 6 column BED file generated by bedtools bamtobed.
# If ATAC-seq is used, be sure shifted "+" and "-" reads.

import sys
import re
import subprocess

fir1 = sys.argv[1]
fir2 = sys.argv[2]

tmpfile1 = "file.tmp1.tmp"
tmpfile2 = "file.tmp2.tmp"
tmpfile3 = "file.tmp3.tmp"

# remove chrM

f = open(r'%s' % fir1, 'r')
g = open(r'%s' % tmpfile1, 'w')

chr_info = ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13',
            'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY']

for line in f.readlines():
    temp = re.split(r'\s|/', line)
    if temp[0] in chr_info:
        new_line = '\t'.join([str(i) for i in temp])
        g.write(new_line + '\n')

f.close()
g.close()


# sort
# when finished, like below. - is line 1, + is line 2
# chr1 567526 567602 SRR1779765.10027 2 6 -
# chr1 567259 567335 SRR1779765.10027 1 6 +
subprocess.call(r'sort -k1,1 -k4,4 -k7,7 %s > %s' % (tmpfile1, tmpfile2), shell=True)

# merge

f = open(r'%s' % tmpfile2, 'r')
g = open(r'%s' % tmpfile3, 'w')

for line in f.readlines():
    tmp = line.split()
    if tmp[6] == "-":
        max_v = tmp[2]
    elif tmp[6] == "+":
        min_v = tmp[1]
        if max_v > min_v:
            new_line = tmp[0] + "\t" + min_v + "\t" + max_v + "\t" + tmp[3] + "\t255\t*\n"
            g.write(new_line)

f.close()
g.close()

subprocess.call(r'sort -k1,1 -k2n,2 %s > %s' % (tmpfile3, fir2), shell=True)

subprocess.call(r'rm -f %s' % tmpfile1, shell=True)
subprocess.call(r'rm -f %s' % tmpfile2, shell=True)
subprocess.call(r'rm -f %s' % tmpfile3, shell=True)

